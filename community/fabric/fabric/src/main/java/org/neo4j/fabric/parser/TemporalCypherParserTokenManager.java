/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/* TemporalCypherParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. TemporalCypherParserTokenManager.java */

package org.neo4j.fabric.parser;

/** Token Manager. */
@SuppressWarnings("unused")
public class TemporalCypherParserTokenManager implements TemporalCypherParserConstants {

    /** Debug output. */
    public java.io.PrintStream debugStream = System.out;
    /** Set debug output. */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 9:
                jjmatchedKind = 5;
                return jjMoveNfa_0(1, 0);
            case 10:
                jjmatchedKind = 1;
                return jjMoveNfa_0(1, 0);
            case 13:
                jjmatchedKind = 2;
                return jjMoveStringLiteralDfa1_0(0x8L);
            case 32:
                jjmatchedKind = 6;
                return jjMoveNfa_0(1, 0);
            case 40:
                jjmatchedKind = 11;
                return jjMoveNfa_0(1, 0);
            case 41:
                jjmatchedKind = 12;
                return jjMoveNfa_0(1, 0);
            case 42:
                jjmatchedKind = 10;
                return jjMoveNfa_0(1, 0);
            case 44:
                jjmatchedKind = 15;
                return jjMoveNfa_0(1, 0);
            case 45:
                jjmatchedKind = 31;
                return jjMoveStringLiteralDfa1_0(0x200000000L);
            case 58:
                jjmatchedKind = 32;
                return jjMoveNfa_0(1, 0);
            case 60:
                return jjMoveStringLiteralDfa1_0(0x400000000L);
            case 61:
                jjmatchedKind = 16;
                return jjMoveNfa_0(1, 0);
            case 65:
                return jjMoveStringLiteralDfa1_0(0x600000L);
            case 67:
                return jjMoveStringLiteralDfa1_0(0x2000000L);
            case 70:
                return jjMoveStringLiteralDfa1_0(0x880000L);
            case 73:
                return jjMoveStringLiteralDfa1_0(0x4020000L);
            case 77:
                return jjMoveStringLiteralDfa1_0(0x80L);
            case 82:
                return jjMoveStringLiteralDfa1_0(0x200L);
            case 83:
                return jjMoveStringLiteralDfa1_0(0x100000L);
            case 84:
                return jjMoveStringLiteralDfa1_0(0x1000000L);
            case 85:
                return jjMoveStringLiteralDfa1_0(0x40000L);
            case 87:
                return jjMoveStringLiteralDfa1_0(0x100L);
            case 91:
                jjmatchedKind = 13;
                return jjMoveNfa_0(1, 0);
            case 92:
                jjmatchedKind = 4;
                return jjMoveNfa_0(1, 0);
            case 93:
                jjmatchedKind = 14;
                return jjMoveNfa_0(1, 0);
            case 97:
                return jjMoveStringLiteralDfa1_0(0x600000L);
            case 99:
                return jjMoveStringLiteralDfa1_0(0x2000000L);
            case 102:
                return jjMoveStringLiteralDfa1_0(0x880000L);
            case 105:
                return jjMoveStringLiteralDfa1_0(0x4020000L);
            case 109:
                return jjMoveStringLiteralDfa1_0(0x80L);
            case 114:
                return jjMoveStringLiteralDfa1_0(0x200L);
            case 115:
                return jjMoveStringLiteralDfa1_0(0x100000L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x1000000L);
            case 117:
                return jjMoveStringLiteralDfa1_0(0x40000L);
            case 119:
                return jjMoveStringLiteralDfa1_0(0x100L);
            default:
                return jjMoveNfa_0(1, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(1, 0);
        }
        switch (curChar) {
            case 10:
                if ((active0 & 0x8L) != 0L) {
                    jjmatchedKind = 3;
                    jjmatchedPos = 1;
                }
                break;
            case 45:
                if ((active0 & 0x400000000L) != 0L) {
                    jjmatchedKind = 34;
                    jjmatchedPos = 1;
                }
                break;
            case 62:
                if ((active0 & 0x200000000L) != 0L) {
                    jjmatchedKind = 33;
                    jjmatchedPos = 1;
                }
                break;
            case 65:
                return jjMoveStringLiteralDfa2_0(active0, 0x80L);
            case 68:
                if ((active0 & 0x20000L) != 0L) {
                    jjmatchedKind = 17;
                    jjmatchedPos = 1;
                }
                break;
            case 69:
                return jjMoveStringLiteralDfa2_0(active0, 0x200L);
            case 72:
                return jjMoveStringLiteralDfa2_0(active0, 0x100L);
            case 78:
                if ((active0 & 0x4000000L) != 0L) {
                    jjmatchedKind = 26;
                    jjmatchedPos = 1;
                }
                break;
            case 79:
                if ((active0 & 0x1000000L) != 0L) {
                    jjmatchedKind = 24;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x2080000L);
            case 80:
                return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
            case 82:
                return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
            case 83:
                return jjMoveStringLiteralDfa2_0(active0, 0x440000L);
            case 89:
                return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x80L);
            case 100:
                if ((active0 & 0x20000L) != 0L) {
                    jjmatchedKind = 17;
                    jjmatchedPos = 1;
                }
                break;
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x200L);
            case 104:
                return jjMoveStringLiteralDfa2_0(active0, 0x100L);
            case 110:
                if ((active0 & 0x4000000L) != 0L) {
                    jjmatchedKind = 26;
                    jjmatchedPos = 1;
                }
                break;
            case 111:
                if ((active0 & 0x1000000L) != 0L) {
                    jjmatchedKind = 24;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x2080000L);
            case 112:
                return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
            case 115:
                return jjMoveStringLiteralDfa2_0(active0, 0x440000L);
            case 121:
                return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
            default:
                break;
        }
        return jjMoveNfa_0(1, 1);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) return jjMoveNfa_0(1, 1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(1, 1);
        }
        switch (curChar) {
            case 32:
                return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
            case 69:
                if ((active0 & 0x40000L) != 0L) {
                    jjmatchedKind = 18;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x100L);
            case 78:
                return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
            case 79:
                return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
            case 80:
                return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
            case 82:
                if ((active0 & 0x80000L) != 0L) {
                    jjmatchedKind = 19;
                    jjmatchedPos = 2;
                }
                break;
            case 83:
                return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
            case 84:
                return jjMoveStringLiteralDfa3_0(active0, 0x280L);
            case 101:
                if ((active0 & 0x40000L) != 0L) {
                    jjmatchedKind = 18;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x100L);
            case 110:
                return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
            case 111:
                return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
            case 112:
                return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
            case 114:
                if ((active0 & 0x80000L) != 0L) {
                    jjmatchedKind = 19;
                    jjmatchedPos = 2;
                }
                break;
            case 115:
                return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
            case 116:
                return jjMoveStringLiteralDfa3_0(active0, 0x280L);
            default:
                break;
        }
        return jjMoveNfa_0(1, 2);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) return jjMoveNfa_0(1, 2);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(1, 2);
        }
        switch (curChar) {
            case 67:
                return jjMoveStringLiteralDfa4_0(active0, 0x80L);
            case 76:
                return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
            case 77:
                if ((active0 & 0x800000L) != 0L) {
                    jjmatchedKind = 23;
                    jjmatchedPos = 3;
                }
                break;
            case 79:
                return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
            case 82:
                return jjMoveStringLiteralDfa4_0(active0, 0x100L);
            case 84:
                return jjMoveStringLiteralDfa4_0(active0, 0x2100000L);
            case 85:
                return jjMoveStringLiteralDfa4_0(active0, 0x200L);
            case 99:
                return jjMoveStringLiteralDfa4_0(active0, 0x80L);
            case 108:
                return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
            case 109:
                if ((active0 & 0x800000L) != 0L) {
                    jjmatchedKind = 23;
                    jjmatchedPos = 3;
                }
                break;
            case 111:
                return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
            case 114:
                return jjMoveStringLiteralDfa4_0(active0, 0x100L);
            case 116:
                return jjMoveStringLiteralDfa4_0(active0, 0x2100000L);
            case 117:
                return jjMoveStringLiteralDfa4_0(active0, 0x200L);
            default:
                break;
        }
        return jjMoveNfa_0(1, 3);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) return jjMoveNfa_0(1, 3);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(1, 3);
        }
        switch (curChar) {
            case 65:
                return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
            case 69:
                if ((active0 & 0x100L) != 0L) {
                    jjmatchedKind = 8;
                    jjmatchedPos = 4;
                }
                return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
            case 70:
                if ((active0 & 0x400000L) != 0L) {
                    jjmatchedKind = 22;
                    jjmatchedPos = 4;
                }
                break;
            case 72:
                if ((active0 & 0x80L) != 0L) {
                    jjmatchedKind = 7;
                    jjmatchedPos = 4;
                }
                break;
            case 73:
                return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
            case 82:
                return jjMoveStringLiteralDfa5_0(active0, 0x200L);
            case 97:
                return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
            case 101:
                if ((active0 & 0x100L) != 0L) {
                    jjmatchedKind = 8;
                    jjmatchedPos = 4;
                }
                return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
            case 102:
                if ((active0 & 0x400000L) != 0L) {
                    jjmatchedKind = 22;
                    jjmatchedPos = 4;
                }
                break;
            case 104:
                if ((active0 & 0x80L) != 0L) {
                    jjmatchedKind = 7;
                    jjmatchedPos = 4;
                }
                break;
            case 105:
                return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
            case 114:
                return jjMoveStringLiteralDfa5_0(active0, 0x200L);
            default:
                break;
        }
        return jjMoveNfa_0(1, 4);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) return jjMoveNfa_0(1, 4);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(1, 4);
        }
        switch (curChar) {
            case 67:
                return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
            case 73:
                return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
            case 77:
                return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
            case 78:
                if ((active0 & 0x200L) != 0L) {
                    jjmatchedKind = 9;
                    jjmatchedPos = 5;
                }
                break;
            case 99:
                return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
            case 105:
                return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
            case 109:
                return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
            case 110:
                if ((active0 & 0x200L) != 0L) {
                    jjmatchedKind = 9;
                    jjmatchedPos = 5;
                }
                break;
            default:
                break;
        }
        return jjMoveNfa_0(1, 5);
    }

    private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) return jjMoveNfa_0(1, 5);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(1, 5);
        }
        switch (curChar) {
            case 65:
                return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
            case 78:
                return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
            case 95:
                return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
            case 97:
                return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
            case 110:
                return jjMoveStringLiteralDfa7_0(active0, 0x2000000L);
            default:
                break;
        }
        return jjMoveNfa_0(1, 6);
    }

    private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) return jjMoveNfa_0(1, 6);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(1, 6);
        }
        switch (curChar) {
            case 69:
                return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
            case 84:
                return jjMoveStringLiteralDfa8_0(active0, 0x300000L);
            case 101:
                return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
            case 116:
                return jjMoveStringLiteralDfa8_0(active0, 0x300000L);
            default:
                break;
        }
        return jjMoveNfa_0(1, 7);
    }

    private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) return jjMoveNfa_0(1, 7);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(1, 7);
        }
        switch (curChar) {
            case 68:
                if ((active0 & 0x2000000L) != 0L) {
                    jjmatchedKind = 25;
                    jjmatchedPos = 8;
                }
                break;
            case 73:
                return jjMoveStringLiteralDfa9_0(active0, 0x300000L);
            case 100:
                if ((active0 & 0x2000000L) != 0L) {
                    jjmatchedKind = 25;
                    jjmatchedPos = 8;
                }
                break;
            case 105:
                return jjMoveStringLiteralDfa9_0(active0, 0x300000L);
            default:
                break;
        }
        return jjMoveNfa_0(1, 8);
    }

    private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) return jjMoveNfa_0(1, 8);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(1, 8);
        }
        switch (curChar) {
            case 77:
                return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
            case 79:
                return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
            case 109:
                return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
            case 111:
                return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
            default:
                break;
        }
        return jjMoveNfa_0(1, 9);
    }

    private int jjMoveStringLiteralDfa10_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) return jjMoveNfa_0(1, 9);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(1, 9);
        }
        switch (curChar) {
            case 69:
                if ((active0 & 0x100000L) != 0L) {
                    jjmatchedKind = 20;
                    jjmatchedPos = 10;
                }
                break;
            case 78:
                return jjMoveStringLiteralDfa11_0(active0, 0x200000L);
            case 101:
                if ((active0 & 0x100000L) != 0L) {
                    jjmatchedKind = 20;
                    jjmatchedPos = 10;
                }
                break;
            case 110:
                return jjMoveStringLiteralDfa11_0(active0, 0x200000L);
            default:
                break;
        }
        return jjMoveNfa_0(1, 10);
    }

    private int jjMoveStringLiteralDfa11_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) return jjMoveNfa_0(1, 10);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(1, 10);
        }
        switch (curChar) {
            case 95:
                return jjMoveStringLiteralDfa12_0(active0, 0x200000L);
            default:
                break;
        }
        return jjMoveNfa_0(1, 11);
    }

    private int jjMoveStringLiteralDfa12_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) return jjMoveNfa_0(1, 11);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(1, 11);
        }
        switch (curChar) {
            case 84:
                return jjMoveStringLiteralDfa13_0(active0, 0x200000L);
            case 116:
                return jjMoveStringLiteralDfa13_0(active0, 0x200000L);
            default:
                break;
        }
        return jjMoveNfa_0(1, 12);
    }

    private int jjMoveStringLiteralDfa13_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) return jjMoveNfa_0(1, 12);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(1, 12);
        }
        switch (curChar) {
            case 73:
                return jjMoveStringLiteralDfa14_0(active0, 0x200000L);
            case 105:
                return jjMoveStringLiteralDfa14_0(active0, 0x200000L);
            default:
                break;
        }
        return jjMoveNfa_0(1, 13);
    }

    private int jjMoveStringLiteralDfa14_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) return jjMoveNfa_0(1, 13);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(1, 13);
        }
        switch (curChar) {
            case 77:
                return jjMoveStringLiteralDfa15_0(active0, 0x200000L);
            case 109:
                return jjMoveStringLiteralDfa15_0(active0, 0x200000L);
            default:
                break;
        }
        return jjMoveNfa_0(1, 14);
    }

    private int jjMoveStringLiteralDfa15_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) return jjMoveNfa_0(1, 14);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(1, 14);
        }
        switch (curChar) {
            case 69:
                if ((active0 & 0x200000L) != 0L) {
                    jjmatchedKind = 21;
                    jjmatchedPos = 15;
                }
                break;
            case 101:
                if ((active0 & 0x200000L) != 0L) {
                    jjmatchedKind = 21;
                    jjmatchedPos = 15;
                }
                break;
            default:
                break;
        }
        return jjMoveNfa_0(1, 15);
    }

    private int jjMoveNfa_0(int startState, int curPos) {
        int strKind = jjmatchedKind;
        int strPos = jjmatchedPos;
        int seenUpto;
        input_stream.backup(seenUpto = curPos + 1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            throw new Error("Internal Error");
        }
        curPos = 0;
        int startsAt = 0;
        jjnewStateCnt = 3;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff) ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                        case 0:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 27) kind = 27;
                            {
                                jjCheckNAdd(0);
                            }
                            break;
                        case 2:
                            if ((0x3ff000000000000L & l) == 0L) break;
                            if (kind > 28) kind = 28;
                            jjstateSet[jjnewStateCnt++] = 2;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 1:
                        case 2:
                            if ((0x7fffffe07fffffeL & l) == 0L) break;
                            if (kind > 28) kind = 28;
                            {
                                jjCheckNAdd(2);
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt))) break;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                break;
            }
        }
        if (jjmatchedPos > strPos) return curPos;

        int toRet = Math.max(curPos, seenUpto);

        if (curPos < toRet)
            for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
                try {
                    curChar = input_stream.readChar();
                } catch (java.io.IOException e) {
                    throw new Error("Internal Error : Please send a bug report.");
                }

        if (jjmatchedPos < strPos) {
            jjmatchedKind = strKind;
            jjmatchedPos = strPos;
        } else if (jjmatchedPos == strPos && jjmatchedKind > strKind) jjmatchedKind = strKind;

        return toRet;
    }

    /** Token literal values. */
    public static final String[] jjstrLiteralImages = {
        "", null, null, null, null, null, null, null, null, null, "\52", "\50", "\51", "\133", "\135", "\54", "\75",
        null, null, null, null, null, null, null, null, null, null, null, null, null, null, "\55", "\72", "\55\76",
        "\74\55",
    };

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        t.image = curTokenImage;

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    static final int[] jjnextStates = {0};

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /** Get the next Token. */
    public Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ; ) {
            try {
                curChar = input_stream.BeginToken();
            } catch (Exception e) {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos) input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    return matchedToken;
                } else {
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(
                    EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    void SkipLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            default:
                break;
        }
    }

    void MoreLexicalActions() {
        jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
        switch (jjmatchedKind) {
            default:
                break;
        }
    }

    void TokenLexicalActions(Token matchedToken) {
        switch (jjmatchedKind) {
            default:
                break;
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    /** Constructor. */
    public TemporalCypherParserTokenManager(SimpleCharStream stream) {

        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

        input_stream = stream;
    }

    /** Constructor. */
    public TemporalCypherParserTokenManager(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Reinitialise parser. */
    public void ReInit(SimpleCharStream stream) {

        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 3; i-- > 0; ) jjrounds[i] = 0x80000000;
    }

    /** Reinitialise parser. */
    public void ReInit(SimpleCharStream stream, int lexState) {

        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Switch to specified lex state. */
    public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError(
                    "Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
                    TokenMgrError.INVALID_LEXICAL_STATE);
        else curLexState = lexState;
    }

    /** Lexer state names. */
    public static final String[] lexStateNames = {
        "DEFAULT",
    };

    /** Lex State array. */
    public static final int[] jjnewLexState = {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1,
    };

    static final long[] jjtoToken = {
        0x7ffffff81L,
    };
    static final long[] jjtoSkip = {
        0x7eL,
    };
    static final long[] jjtoSpecial = {
        0x0L,
    };
    static final long[] jjtoMore = {
        0x0L,
    };
    protected SimpleCharStream input_stream;

    private final int[] jjrounds = new int[3];
    private final int[] jjstateSet = new int[2 * 3];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
