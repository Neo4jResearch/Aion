/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/* Generated By:JavaCC: Do not edit this line. TemporalCypherParserConstants.java */

package org.neo4j.fabric.parser;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TemporalCypherParserConstants {

    /** End of File. */
    int EOF = 0;
    /** RegularExpression Id. */
    int MATCH = 7;
    /** RegularExpression Id. */
    int WHERE = 8;
    /** RegularExpression Id. */
    int RETURN = 9;
    /** RegularExpression Id. */
    int ALL = 10;
    /** RegularExpression Id. */
    int LPAR = 11;
    /** RegularExpression Id. */
    int RPAR = 12;
    /** RegularExpression Id. */
    int LBRACKET = 13;
    /** RegularExpression Id. */
    int RBRACKET = 14;
    /** RegularExpression Id. */
    int COMMA = 15;
    /** RegularExpression Id. */
    int EQUALS = 16;
    /** RegularExpression Id. */
    int ID = 17;
    /** RegularExpression Id. */
    int USE = 18;
    /** RegularExpression Id. */
    int FOR = 19;
    /** RegularExpression Id. */
    int SYSTEM_TIME = 20;
    /** RegularExpression Id. */
    int APPLICATION_TIME = 21;
    /** RegularExpression Id. */
    int AS_OF = 22;
    /** RegularExpression Id. */
    int FROM = 23;
    /** RegularExpression Id. */
    int TO = 24;
    /** RegularExpression Id. */
    int CONTAINED = 25;
    /** RegularExpression Id. */
    int IN = 26;
    /** RegularExpression Id. */
    int NUMBER = 27;
    /** RegularExpression Id. */
    int NAME = 28;
    /** RegularExpression Id. */
    int CHAR = 29;
    /** RegularExpression Id. */
    int DIGIT = 30;

    /** Lexical state. */
    int DEFAULT = 0;

    /** Literal token values. */
    String[] tokenImage = {
        "<EOF>",
        "\"\\n\"",
        "\"\\r\"",
        "\"\\r\\n\"",
        "\"\\\\\"",
        "\"\\t\"",
        "\" \"",
        "\"MATCH\"",
        "\"WHERE\"",
        "\"RETURN\"",
        "\"*\"",
        "\"(\"",
        "\")\"",
        "\"[\"",
        "\"]\"",
        "\",\"",
        "\"=\"",
        "\"ID\"",
        "\"USE\"",
        "\"FOR\"",
        "\"SYSTEM_TIME\"",
        "\"APPLICATION_TIME\"",
        "\"AS OF\"",
        "\"FROM\"",
        "\"TO\"",
        "\"CONTAINED\"",
        "\"IN\"",
        "<NUMBER>",
        "<NAME>",
        "<CHAR>",
        "<DIGIT>",
        "\"-\"",
        "\":\"",
        "\"->\"",
        "\"<-\"",
    };
}
